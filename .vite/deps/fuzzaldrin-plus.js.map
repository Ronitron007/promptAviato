{
  "version": 3,
  "sources": ["../../../../../../../aviato-ui/node_modules/fuzzaldrin-plus/lib/scorer.js", "../../../../../../../aviato-ui/node_modules/fuzzaldrin-plus/lib/pathScorer.js", "../../../../../../../aviato-ui/node_modules/fuzzaldrin-plus/lib/query.js", "../../../../../../../aviato-ui/node_modules/fuzzaldrin-plus/lib/filter.js", "../../../../../../../aviato-ui/node_modules/fuzzaldrin-plus/lib/matcher.js", "../../../../../../../aviato-ui/node_modules/fuzzaldrin-plus/lib/fuzzaldrin.js"],
  "sourcesContent": ["(function() {\n  var AcronymResult, computeScore, emptyAcronymResult, isAcronymFullWord, isMatch, isSeparator, isWordEnd, isWordStart, miss_coeff, pos_bonus, scoreAcronyms, scoreCharacter, scoreConsecutives, scoreExact, scoreExactMatch, scorePattern, scorePosition, scoreSize, tau_size, wm;\n\n  wm = 150;\n\n  pos_bonus = 20;\n\n  tau_size = 150;\n\n  miss_coeff = 0.75;\n\n  exports.score = function(string, query, options) {\n    var allowErrors, preparedQuery, score, string_lw;\n    preparedQuery = options.preparedQuery, allowErrors = options.allowErrors;\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return 0;\n    }\n    string_lw = string.toLowerCase();\n    score = computeScore(string, string_lw, preparedQuery);\n    return Math.ceil(score);\n  };\n\n  exports.isMatch = isMatch = function(subject, query_lw, query_up) {\n    var i, j, m, n, qj_lw, qj_up, si;\n    m = subject.length;\n    n = query_lw.length;\n    if (!m || n > m) {\n      return false;\n    }\n    i = -1;\n    j = -1;\n    while (++j < n) {\n      qj_lw = query_lw.charCodeAt(j);\n      qj_up = query_up.charCodeAt(j);\n      while (++i < m) {\n        si = subject.charCodeAt(i);\n        if (si === qj_lw || si === qj_up) {\n          break;\n        }\n      }\n      if (i === m) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  exports.computeScore = computeScore = function(subject, subject_lw, preparedQuery) {\n    var acro, acro_score, align, csc_diag, csc_row, csc_score, csc_should_rebuild, i, j, m, miss_budget, miss_left, n, pos, query, query_lw, record_miss, score, score_diag, score_row, score_up, si_lw, start, sz;\n    query = preparedQuery.query;\n    query_lw = preparedQuery.query_lw;\n    m = subject.length;\n    n = query.length;\n    acro = scoreAcronyms(subject, subject_lw, query, query_lw);\n    acro_score = acro.score;\n    if (acro.count === n) {\n      return scoreExact(n, m, acro_score, acro.pos);\n    }\n    pos = subject_lw.indexOf(query_lw);\n    if (pos > -1) {\n      return scoreExactMatch(subject, subject_lw, query, query_lw, pos, n, m);\n    }\n    score_row = new Array(n);\n    csc_row = new Array(n);\n    sz = scoreSize(n, m);\n    miss_budget = Math.ceil(miss_coeff * n) + 5;\n    miss_left = miss_budget;\n    csc_should_rebuild = true;\n    j = -1;\n    while (++j < n) {\n      score_row[j] = 0;\n      csc_row[j] = 0;\n    }\n    i = -1;\n    while (++i < m) {\n      si_lw = subject_lw[i];\n      if (!si_lw.charCodeAt(0) in preparedQuery.charCodes) {\n        if (csc_should_rebuild) {\n          j = -1;\n          while (++j < n) {\n            csc_row[j] = 0;\n          }\n          csc_should_rebuild = false;\n        }\n        continue;\n      }\n      score = 0;\n      score_diag = 0;\n      csc_diag = 0;\n      record_miss = true;\n      csc_should_rebuild = true;\n      j = -1;\n      while (++j < n) {\n        score_up = score_row[j];\n        if (score_up > score) {\n          score = score_up;\n        }\n        csc_score = 0;\n        if (query_lw[j] === si_lw) {\n          start = isWordStart(i, subject, subject_lw);\n          csc_score = csc_diag > 0 ? csc_diag : scoreConsecutives(subject, subject_lw, query, query_lw, i, j, start);\n          align = score_diag + scoreCharacter(i, j, start, acro_score, csc_score);\n          if (align > score) {\n            score = align;\n            miss_left = miss_budget;\n          } else {\n            if (record_miss && --miss_left <= 0) {\n              return Math.max(score, score_row[n - 1]) * sz;\n            }\n            record_miss = false;\n          }\n        }\n        score_diag = score_up;\n        csc_diag = csc_row[j];\n        csc_row[j] = csc_score;\n        score_row[j] = score;\n      }\n    }\n    score = score_row[n - 1];\n    return score * sz;\n  };\n\n  exports.isWordStart = isWordStart = function(pos, subject, subject_lw) {\n    var curr_s, prev_s;\n    if (pos === 0) {\n      return true;\n    }\n    curr_s = subject[pos];\n    prev_s = subject[pos - 1];\n    return isSeparator(prev_s) || (curr_s !== subject_lw[pos] && prev_s === subject_lw[pos - 1]);\n  };\n\n  exports.isWordEnd = isWordEnd = function(pos, subject, subject_lw, len) {\n    var curr_s, next_s;\n    if (pos === len - 1) {\n      return true;\n    }\n    curr_s = subject[pos];\n    next_s = subject[pos + 1];\n    return isSeparator(next_s) || (curr_s === subject_lw[pos] && next_s !== subject_lw[pos + 1]);\n  };\n\n  isSeparator = function(c) {\n    return c === ' ' || c === '.' || c === '-' || c === '_' || c === '/' || c === '\\\\';\n  };\n\n  scorePosition = function(pos) {\n    var sc;\n    if (pos < pos_bonus) {\n      sc = pos_bonus - pos;\n      return 100 + sc * sc;\n    } else {\n      return Math.max(100 + pos_bonus - pos, 0);\n    }\n  };\n\n  exports.scoreSize = scoreSize = function(n, m) {\n    return tau_size / (tau_size + Math.abs(m - n));\n  };\n\n  scoreExact = function(n, m, quality, pos) {\n    return 2 * n * (wm * quality + scorePosition(pos)) * scoreSize(n, m);\n  };\n\n  exports.scorePattern = scorePattern = function(count, len, sameCase, start, end) {\n    var bonus, sz;\n    sz = count;\n    bonus = 6;\n    if (sameCase === count) {\n      bonus += 2;\n    }\n    if (start) {\n      bonus += 3;\n    }\n    if (end) {\n      bonus += 1;\n    }\n    if (count === len) {\n      if (start) {\n        if (sameCase === len) {\n          sz += 2;\n        } else {\n          sz += 1;\n        }\n      }\n      if (end) {\n        bonus += 1;\n      }\n    }\n    return sameCase + sz * (sz + bonus);\n  };\n\n  exports.scoreCharacter = scoreCharacter = function(i, j, start, acro_score, csc_score) {\n    var posBonus;\n    posBonus = scorePosition(i);\n    if (start) {\n      return posBonus + wm * ((acro_score > csc_score ? acro_score : csc_score) + 10);\n    }\n    return posBonus + wm * csc_score;\n  };\n\n  exports.scoreConsecutives = scoreConsecutives = function(subject, subject_lw, query, query_lw, i, j, startOfWord) {\n    var k, m, mi, n, nj, sameCase, sz;\n    m = subject.length;\n    n = query.length;\n    mi = m - i;\n    nj = n - j;\n    k = mi < nj ? mi : nj;\n    sameCase = 0;\n    sz = 0;\n    if (query[j] === subject[i]) {\n      sameCase++;\n    }\n    while (++sz < k && query_lw[++j] === subject_lw[++i]) {\n      if (query[j] === subject[i]) {\n        sameCase++;\n      }\n    }\n    if (sz < k) {\n      i--;\n    }\n    if (sz === 1) {\n      return 1 + 2 * sameCase;\n    }\n    return scorePattern(sz, n, sameCase, startOfWord, isWordEnd(i, subject, subject_lw, m));\n  };\n\n  exports.scoreExactMatch = scoreExactMatch = function(subject, subject_lw, query, query_lw, pos, n, m) {\n    var end, i, pos2, sameCase, start;\n    start = isWordStart(pos, subject, subject_lw);\n    if (!start) {\n      pos2 = subject_lw.indexOf(query_lw, pos + 1);\n      if (pos2 > -1) {\n        start = isWordStart(pos2, subject, subject_lw);\n        if (start) {\n          pos = pos2;\n        }\n      }\n    }\n    i = -1;\n    sameCase = 0;\n    while (++i < n) {\n      if (query[pos + i] === subject[i]) {\n        sameCase++;\n      }\n    }\n    end = isWordEnd(pos + n - 1, subject, subject_lw, m);\n    return scoreExact(n, m, scorePattern(n, n, sameCase, start, end), pos);\n  };\n\n  AcronymResult = (function() {\n    function AcronymResult(score, pos, count) {\n      this.score = score;\n      this.pos = pos;\n      this.count = count;\n    }\n\n    return AcronymResult;\n\n  })();\n\n  emptyAcronymResult = new AcronymResult(0, 0.1, 0);\n\n  exports.scoreAcronyms = scoreAcronyms = function(subject, subject_lw, query, query_lw) {\n    var count, fullWord, i, j, m, n, qj_lw, sameCase, score, sepCount, sumPos;\n    m = subject.length;\n    n = query.length;\n    if (!(m > 1 && n > 1)) {\n      return emptyAcronymResult;\n    }\n    count = 0;\n    sepCount = 0;\n    sumPos = 0;\n    sameCase = 0;\n    i = -1;\n    j = -1;\n    while (++j < n) {\n      qj_lw = query_lw[j];\n      if (isSeparator(qj_lw)) {\n        i = subject_lw.indexOf(qj_lw, i + 1);\n        if (i > -1) {\n          sepCount++;\n          continue;\n        } else {\n          break;\n        }\n      }\n      while (++i < m) {\n        if (qj_lw === subject_lw[i] && isWordStart(i, subject, subject_lw)) {\n          if (query[j] === subject[i]) {\n            sameCase++;\n          }\n          sumPos += i;\n          count++;\n          break;\n        }\n      }\n      if (i === m) {\n        break;\n      }\n    }\n    if (count < 2) {\n      return emptyAcronymResult;\n    }\n    fullWord = count === n ? isAcronymFullWord(subject, subject_lw, query, count) : false;\n    score = scorePattern(count, n, sameCase, true, fullWord);\n    return new AcronymResult(score, sumPos / count, count + sepCount);\n  };\n\n  isAcronymFullWord = function(subject, subject_lw, query, nbAcronymInQuery) {\n    var count, i, m, n;\n    m = subject.length;\n    n = query.length;\n    count = 0;\n    if (m > 12 * n) {\n      return false;\n    }\n    i = -1;\n    while (++i < m) {\n      if (isWordStart(i, subject, subject_lw) && ++count > nbAcronymInQuery) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n}).call(this);\n", "(function() {\n  var computeScore, countDir, file_coeff, getExtension, getExtensionScore, isMatch, scorePath, scoreSize, tau_depth, _ref;\n\n  _ref = require('./scorer'), isMatch = _ref.isMatch, computeScore = _ref.computeScore, scoreSize = _ref.scoreSize;\n\n  tau_depth = 20;\n\n  file_coeff = 2.5;\n\n  exports.score = function(string, query, options) {\n    var allowErrors, preparedQuery, score, string_lw;\n    preparedQuery = options.preparedQuery, allowErrors = options.allowErrors;\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return 0;\n    }\n    string_lw = string.toLowerCase();\n    score = computeScore(string, string_lw, preparedQuery);\n    score = scorePath(string, string_lw, score, options);\n    return Math.ceil(score);\n  };\n\n  scorePath = function(subject, subject_lw, fullPathScore, options) {\n    var alpha, basePathScore, basePos, depth, end, extAdjust, fileLength, pathSeparator, preparedQuery, useExtensionBonus;\n    if (fullPathScore === 0) {\n      return 0;\n    }\n    preparedQuery = options.preparedQuery, useExtensionBonus = options.useExtensionBonus, pathSeparator = options.pathSeparator;\n    end = subject.length - 1;\n    while (subject[end] === pathSeparator) {\n      end--;\n    }\n    basePos = subject.lastIndexOf(pathSeparator, end);\n    fileLength = end - basePos;\n    extAdjust = 1.0;\n    if (useExtensionBonus) {\n      extAdjust += getExtensionScore(subject_lw, preparedQuery.ext, basePos, end, 2);\n      fullPathScore *= extAdjust;\n    }\n    if (basePos === -1) {\n      return fullPathScore;\n    }\n    depth = preparedQuery.depth;\n    while (basePos > -1 && depth-- > 0) {\n      basePos = subject.lastIndexOf(pathSeparator, basePos - 1);\n    }\n    basePathScore = basePos === -1 ? fullPathScore : extAdjust * computeScore(subject.slice(basePos + 1, end + 1), subject_lw.slice(basePos + 1, end + 1), preparedQuery);\n    alpha = 0.5 * tau_depth / (tau_depth + countDir(subject, end + 1, pathSeparator));\n    return alpha * basePathScore + (1 - alpha) * fullPathScore * scoreSize(0, file_coeff * fileLength);\n  };\n\n  exports.countDir = countDir = function(path, end, pathSeparator) {\n    var count, i;\n    if (end < 1) {\n      return 0;\n    }\n    count = 0;\n    i = -1;\n    while (++i < end && path[i] === pathSeparator) {\n      continue;\n    }\n    while (++i < end) {\n      if (path[i] === pathSeparator) {\n        count++;\n        while (++i < end && path[i] === pathSeparator) {\n          continue;\n        }\n      }\n    }\n    return count;\n  };\n\n  exports.getExtension = getExtension = function(str) {\n    var pos;\n    pos = str.lastIndexOf(\".\");\n    if (pos < 0) {\n      return \"\";\n    } else {\n      return str.substr(pos + 1);\n    }\n  };\n\n  getExtensionScore = function(candidate, ext, startPos, endPos, maxDepth) {\n    var m, matched, n, pos;\n    if (!ext.length) {\n      return 0;\n    }\n    pos = candidate.lastIndexOf(\".\", endPos);\n    if (!(pos > startPos)) {\n      return 0;\n    }\n    n = ext.length;\n    m = endPos - pos;\n    if (m < n) {\n      n = m;\n      m = ext.length;\n    }\n    pos++;\n    matched = -1;\n    while (++matched < n) {\n      if (candidate[pos + matched] !== ext[matched]) {\n        break;\n      }\n    }\n    if (matched === 0 && maxDepth > 0) {\n      return 0.9 * getExtensionScore(candidate, ext, startPos, pos - 2, maxDepth - 1);\n    }\n    return matched / m;\n  };\n\n}).call(this);\n", "(function() {\n  var Query, coreChars, countDir, getCharCodes, getExtension, opt_char_re, truncatedUpperCase, _ref;\n\n  _ref = require(\"./pathScorer\"), countDir = _ref.countDir, getExtension = _ref.getExtension;\n\n  module.exports = Query = (function() {\n    function Query(query, _arg) {\n      var optCharRegEx, pathSeparator, _ref1;\n      _ref1 = _arg != null ? _arg : {}, optCharRegEx = _ref1.optCharRegEx, pathSeparator = _ref1.pathSeparator;\n      if (!(query && query.length)) {\n        return null;\n      }\n      this.query = query;\n      this.query_lw = query.toLowerCase();\n      this.core = coreChars(query, optCharRegEx);\n      this.core_lw = this.core.toLowerCase();\n      this.core_up = truncatedUpperCase(this.core);\n      this.depth = countDir(query, query.length, pathSeparator);\n      this.ext = getExtension(this.query_lw);\n      this.charCodes = getCharCodes(this.query_lw);\n    }\n\n    return Query;\n\n  })();\n\n  opt_char_re = /[ _\\-:\\/\\\\]/g;\n\n  coreChars = function(query, optCharRegEx) {\n    if (optCharRegEx == null) {\n      optCharRegEx = opt_char_re;\n    }\n    return query.replace(optCharRegEx, '');\n  };\n\n  truncatedUpperCase = function(str) {\n    var char, upper, _i, _len;\n    upper = \"\";\n    for (_i = 0, _len = str.length; _i < _len; _i++) {\n      char = str[_i];\n      upper += char.toUpperCase()[0];\n    }\n    return upper;\n  };\n\n  getCharCodes = function(str) {\n    var charCodes, i, len;\n    len = str.length;\n    i = -1;\n    charCodes = [];\n    while (++i < len) {\n      charCodes[str.charCodeAt(i)] = true;\n    }\n    return charCodes;\n  };\n\n}).call(this);\n", "(function() {\n  var Query, pathScorer, pluckCandidates, scorer, sortCandidates;\n\n  scorer = require('./scorer');\n\n  pathScorer = require('./pathScorer');\n\n  Query = require('./query');\n\n  pluckCandidates = function(a) {\n    return a.candidate;\n  };\n\n  sortCandidates = function(a, b) {\n    return b.score - a.score;\n  };\n\n  module.exports = function(candidates, query, options) {\n    var bKey, candidate, key, maxInners, maxResults, score, scoreProvider, scoredCandidates, spotLeft, string, usePathScoring, _i, _len;\n    scoredCandidates = [];\n    key = options.key, maxResults = options.maxResults, maxInners = options.maxInners, usePathScoring = options.usePathScoring;\n    spotLeft = (maxInners != null) && maxInners > 0 ? maxInners : candidates.length + 1;\n    bKey = key != null;\n    scoreProvider = usePathScoring ? pathScorer : scorer;\n    for (_i = 0, _len = candidates.length; _i < _len; _i++) {\n      candidate = candidates[_i];\n      string = bKey ? candidate[key] : candidate;\n      if (!string) {\n        continue;\n      }\n      score = scoreProvider.score(string, query, options);\n      if (score > 0) {\n        scoredCandidates.push({\n          candidate: candidate,\n          score: score\n        });\n        if (!--spotLeft) {\n          break;\n        }\n      }\n    }\n    scoredCandidates.sort(sortCandidates);\n    candidates = scoredCandidates.map(pluckCandidates);\n    if (maxResults != null) {\n      candidates = candidates.slice(0, maxResults);\n    }\n    return candidates;\n  };\n\n}).call(this);\n", "(function() {\n  var basenameMatch, computeMatch, isMatch, isWordStart, match, mergeMatches, scoreAcronyms, scoreCharacter, scoreConsecutives, _ref;\n\n  _ref = require('./scorer'), isMatch = _ref.isMatch, isWordStart = _ref.isWordStart, scoreConsecutives = _ref.scoreConsecutives, scoreCharacter = _ref.scoreCharacter, scoreAcronyms = _ref.scoreAcronyms;\n\n  exports.match = match = function(string, query, options) {\n    var allowErrors, baseMatches, matches, pathSeparator, preparedQuery, string_lw;\n    allowErrors = options.allowErrors, preparedQuery = options.preparedQuery, pathSeparator = options.pathSeparator;\n    if (!(allowErrors || isMatch(string, preparedQuery.core_lw, preparedQuery.core_up))) {\n      return [];\n    }\n    string_lw = string.toLowerCase();\n    matches = computeMatch(string, string_lw, preparedQuery);\n    if (matches.length === 0) {\n      return matches;\n    }\n    if (string.indexOf(pathSeparator) > -1) {\n      baseMatches = basenameMatch(string, string_lw, preparedQuery, pathSeparator);\n      matches = mergeMatches(matches, baseMatches);\n    }\n    return matches;\n  };\n\n  exports.wrap = function(string, query, options) {\n    var matchIndex, matchPos, matchPositions, output, strPos, tagClass, tagClose, tagOpen, _ref1;\n    if ((options.wrap != null)) {\n      _ref1 = options.wrap, tagClass = _ref1.tagClass, tagOpen = _ref1.tagOpen, tagClose = _ref1.tagClose;\n    }\n    if (tagClass == null) {\n      tagClass = 'highlight';\n    }\n    if (tagOpen == null) {\n      tagOpen = '<strong class=\"' + tagClass + '\">';\n    }\n    if (tagClose == null) {\n      tagClose = '</strong>';\n    }\n    if (string === query) {\n      return tagOpen + string + tagClose;\n    }\n    matchPositions = match(string, query, options);\n    if (matchPositions.length === 0) {\n      return string;\n    }\n    output = '';\n    matchIndex = -1;\n    strPos = 0;\n    while (++matchIndex < matchPositions.length) {\n      matchPos = matchPositions[matchIndex];\n      if (matchPos > strPos) {\n        output += string.substring(strPos, matchPos);\n        strPos = matchPos;\n      }\n      while (++matchIndex < matchPositions.length) {\n        if (matchPositions[matchIndex] === matchPos + 1) {\n          matchPos++;\n        } else {\n          matchIndex--;\n          break;\n        }\n      }\n      matchPos++;\n      if (matchPos > strPos) {\n        output += tagOpen;\n        output += string.substring(strPos, matchPos);\n        output += tagClose;\n        strPos = matchPos;\n      }\n    }\n    if (strPos <= string.length - 1) {\n      output += string.substring(strPos);\n    }\n    return output;\n  };\n\n  basenameMatch = function(subject, subject_lw, preparedQuery, pathSeparator) {\n    var basePos, depth, end;\n    end = subject.length - 1;\n    while (subject[end] === pathSeparator) {\n      end--;\n    }\n    basePos = subject.lastIndexOf(pathSeparator, end);\n    if (basePos === -1) {\n      return [];\n    }\n    depth = preparedQuery.depth;\n    while (depth-- > 0) {\n      basePos = subject.lastIndexOf(pathSeparator, basePos - 1);\n      if (basePos === -1) {\n        return [];\n      }\n    }\n    basePos++;\n    end++;\n    return computeMatch(subject.slice(basePos, end), subject_lw.slice(basePos, end), preparedQuery, basePos);\n  };\n\n  mergeMatches = function(a, b) {\n    var ai, bj, i, j, m, n, out;\n    m = a.length;\n    n = b.length;\n    if (n === 0) {\n      return a.slice();\n    }\n    if (m === 0) {\n      return b.slice();\n    }\n    i = -1;\n    j = 0;\n    bj = b[j];\n    out = [];\n    while (++i < m) {\n      ai = a[i];\n      while (bj <= ai && ++j < n) {\n        if (bj < ai) {\n          out.push(bj);\n        }\n        bj = b[j];\n      }\n      out.push(ai);\n    }\n    while (j < n) {\n      out.push(b[j++]);\n    }\n    return out;\n  };\n\n  computeMatch = function(subject, subject_lw, preparedQuery, offset) {\n    var DIAGONAL, LEFT, STOP, UP, acro_score, align, backtrack, csc_diag, csc_row, csc_score, i, j, m, matches, move, n, pos, query, query_lw, score, score_diag, score_row, score_up, si_lw, start, trace;\n    if (offset == null) {\n      offset = 0;\n    }\n    query = preparedQuery.query;\n    query_lw = preparedQuery.query_lw;\n    m = subject.length;\n    n = query.length;\n    acro_score = scoreAcronyms(subject, subject_lw, query, query_lw).score;\n    score_row = new Array(n);\n    csc_row = new Array(n);\n    STOP = 0;\n    UP = 1;\n    LEFT = 2;\n    DIAGONAL = 3;\n    trace = new Array(m * n);\n    pos = -1;\n    j = -1;\n    while (++j < n) {\n      score_row[j] = 0;\n      csc_row[j] = 0;\n    }\n    i = -1;\n    while (++i < m) {\n      score = 0;\n      score_up = 0;\n      csc_diag = 0;\n      si_lw = subject_lw[i];\n      j = -1;\n      while (++j < n) {\n        csc_score = 0;\n        align = 0;\n        score_diag = score_up;\n        if (query_lw[j] === si_lw) {\n          start = isWordStart(i, subject, subject_lw);\n          csc_score = csc_diag > 0 ? csc_diag : scoreConsecutives(subject, subject_lw, query, query_lw, i, j, start);\n          align = score_diag + scoreCharacter(i, j, start, acro_score, csc_score);\n        }\n        score_up = score_row[j];\n        csc_diag = csc_row[j];\n        if (score > score_up) {\n          move = LEFT;\n        } else {\n          score = score_up;\n          move = UP;\n        }\n        if (align > score) {\n          score = align;\n          move = DIAGONAL;\n        } else {\n          csc_score = 0;\n        }\n        score_row[j] = score;\n        csc_row[j] = csc_score;\n        trace[++pos] = score > 0 ? move : STOP;\n      }\n    }\n    i = m - 1;\n    j = n - 1;\n    pos = i * n + j;\n    backtrack = true;\n    matches = [];\n    while (backtrack && i >= 0 && j >= 0) {\n      switch (trace[pos]) {\n        case UP:\n          i--;\n          pos -= n;\n          break;\n        case LEFT:\n          j--;\n          pos--;\n          break;\n        case DIAGONAL:\n          matches.push(i + offset);\n          j--;\n          i--;\n          pos -= n + 1;\n          break;\n        default:\n          backtrack = false;\n      }\n    }\n    matches.reverse();\n    return matches;\n  };\n\n}).call(this);\n", "(function() {\n  var Query, defaultPathSeparator, filter, matcher, parseOptions, pathScorer, preparedQueryCache, scorer;\n\n  filter = require('./filter');\n\n  matcher = require('./matcher');\n\n  scorer = require('./scorer');\n\n  pathScorer = require('./pathScorer');\n\n  Query = require('./query');\n\n  preparedQueryCache = null;\n\n  defaultPathSeparator = (typeof process !== \"undefined\" && process !== null ? process.platform : void 0) === \"win32\" ? '\\\\' : '/';\n\n  module.exports = {\n    filter: function(candidates, query, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (!((query != null ? query.length : void 0) && (candidates != null ? candidates.length : void 0))) {\n        return [];\n      }\n      options = parseOptions(options, query);\n      return filter(candidates, query, options);\n    },\n    score: function(string, query, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (!((string != null ? string.length : void 0) && (query != null ? query.length : void 0))) {\n        return 0;\n      }\n      options = parseOptions(options, query);\n      if (options.usePathScoring) {\n        return pathScorer.score(string, query, options);\n      } else {\n        return scorer.score(string, query, options);\n      }\n    },\n    match: function(string, query, options) {\n      var _i, _ref, _results;\n      if (options == null) {\n        options = {};\n      }\n      if (!string) {\n        return [];\n      }\n      if (!query) {\n        return [];\n      }\n      if (string === query) {\n        return (function() {\n          _results = [];\n          for (var _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this);\n      }\n      options = parseOptions(options, query);\n      return matcher.match(string, query, options);\n    },\n    wrap: function(string, query, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (!string) {\n        return [];\n      }\n      if (!query) {\n        return [];\n      }\n      options = parseOptions(options, query);\n      return matcher.wrap(string, query, options);\n    },\n    prepareQuery: function(query, options) {\n      if (options == null) {\n        options = {};\n      }\n      options = parseOptions(options, query);\n      return options.preparedQuery;\n    }\n  };\n\n  parseOptions = function(options, query) {\n    if (options.allowErrors == null) {\n      options.allowErrors = false;\n    }\n    if (options.usePathScoring == null) {\n      options.usePathScoring = true;\n    }\n    if (options.useExtensionBonus == null) {\n      options.useExtensionBonus = false;\n    }\n    if (options.pathSeparator == null) {\n      options.pathSeparator = defaultPathSeparator;\n    }\n    if (options.optCharRegEx == null) {\n      options.optCharRegEx = null;\n    }\n    if (options.wrap == null) {\n      options.wrap = null;\n    }\n    if (options.preparedQuery == null) {\n      options.preparedQuery = preparedQueryCache && preparedQueryCache.query === query ? preparedQueryCache : (preparedQueryCache = new Query(query, options));\n    }\n    return options;\n  };\n\n}).call(this);\n"],
  "mappings": "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",
  "names": ["AcronymResult", "Query", "_i", "_ref"]
}
