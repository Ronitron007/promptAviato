{
  "version": 3,
  "sources": ["../../../../../../../aviato-ui/node_modules/humanize-plus/dist/humanize.js"],
  "sourcesContent": ["/* humanize.js - v1.8.2 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * Copyright 2013-2016 HubSpotDev\n * MIT Licensed\n *\n * @module humanize.js\n */\n\n(function (root, factory) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return root.Humanize = factory();\n    });\n  } else {\n    root.Humanize = factory();\n  }\n})(this, function () {\n  //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n\n  var TIME_FORMATS = [{\n    name: 'second',\n    value: 1e3\n  }, {\n    name: 'minute',\n    value: 6e4\n  }, {\n    name: 'hour',\n    value: 36e5\n  }, {\n    name: 'day',\n    value: 864e5\n  }, {\n    name: 'week',\n    value: 6048e5\n  }];\n\n  var LABELS_FOR_POWERS_OF_KILO = {\n    P: Math.pow(2, 50),\n    T: Math.pow(2, 40),\n    G: Math.pow(2, 30),\n    M: Math.pow(2, 20)\n  };\n\n  //------------------------------------------------------------------------------\n  // Helpers\n  //------------------------------------------------------------------------------\n\n  var exists = function exists(maybe) {\n    return typeof maybe !== 'undefined' && maybe !== null;\n  };\n\n  var isNaN = function isNaN(value) {\n    return value !== value;\n  }; // eslint-disable-line\n\n  var isFiniteNumber = function isFiniteNumber(value) {\n    return isFinite(value) && !isNaN(parseFloat(value));\n  };\n\n  var isArray = function isArray(value) {\n    var type = Object.prototype.toString.call(value);\n    return type === '[object Array]';\n  };\n\n  //------------------------------------------------------------------------------\n  // Humanize\n  //------------------------------------------------------------------------------\n\n  var Humanize = {\n\n    // Converts a large integer to a friendly text representation.\n\n    intword: function intword(number, charWidth) {\n      var decimals = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];\n\n      /*\n      * This method is deprecated. Please use compactInteger instead.\n      * intword will be going away in the next major version.\n      */\n      return Humanize.compactInteger(number, decimals);\n    },\n\n\n    // Converts an integer into its most compact representation\n    compactInteger: function compactInteger(input) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      decimals = Math.max(decimals, 0);\n      var number = parseInt(input, 10);\n      var signString = number < 0 ? '-' : '';\n      var unsignedNumber = Math.abs(number);\n      var unsignedNumberString = String(unsignedNumber);\n      var numberLength = unsignedNumberString.length;\n      var numberLengths = [13, 10, 7, 4];\n      var bigNumPrefixes = ['T', 'B', 'M', 'k'];\n\n      // small numbers\n      if (unsignedNumber < 1000) {\n        return '' + signString + unsignedNumberString;\n      }\n\n      // really big numbers\n      if (numberLength > numberLengths[0] + 3) {\n        return number.toExponential(decimals).replace('e+', 'x10^');\n      }\n\n      // 999 < unsignedNumber < 999,999,999,999,999\n      var length = void 0;\n      for (var i = 0; i < numberLengths.length; i++) {\n        var _length = numberLengths[i];\n        if (numberLength >= _length) {\n          length = _length;\n          break;\n        }\n      }\n\n      var decimalIndex = numberLength - length + 1;\n      var unsignedNumberCharacterArray = unsignedNumberString.split('');\n\n      var wholePartArray = unsignedNumberCharacterArray.slice(0, decimalIndex);\n      var decimalPartArray = unsignedNumberCharacterArray.slice(decimalIndex, decimalIndex + decimals + 1);\n\n      var wholePart = wholePartArray.join('');\n\n      // pad decimalPart if necessary\n      var decimalPart = decimalPartArray.join('');\n      if (decimalPart.length < decimals) {\n        decimalPart += '' + Array(decimals - decimalPart.length + 1).join('0');\n      }\n\n      var output = void 0;\n      if (decimals === 0) {\n        output = '' + signString + wholePart + bigNumPrefixes[numberLengths.indexOf(length)];\n      } else {\n        var outputNumber = Number(wholePart + '.' + decimalPart).toFixed(decimals);\n        output = '' + signString + outputNumber + bigNumPrefixes[numberLengths.indexOf(length)];\n      }\n\n      return output;\n    },\n\n\n    // Converts an integer to a string containing commas every three digits.\n    intComma: function intComma(number) {\n      var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      return Humanize.formatNumber(number, decimals);\n    },\n    intcomma: function intcomma() {\n      return Humanize.intComma.apply(Humanize, arguments);\n    },\n\n\n    // Formats the value like a 'human-readable' file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc).\n    fileSize: function fileSize(filesize) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];\n\n      for (var label in LABELS_FOR_POWERS_OF_KILO) {\n        if (LABELS_FOR_POWERS_OF_KILO.hasOwnProperty(label)) {\n          var minnum = LABELS_FOR_POWERS_OF_KILO[label];\n          if (filesize >= minnum) {\n            return Humanize.formatNumber(filesize / minnum, precision, '') + ' ' + label + 'B';\n          }\n        }\n      }\n      if (filesize >= 1024) {\n        return Humanize.formatNumber(filesize / 1024, 0) + ' KB';\n      }\n\n      return Humanize.formatNumber(filesize, 0) + Humanize.pluralize(filesize, ' byte');\n    },\n    filesize: function filesize() {\n      return Humanize.fileSize.apply(Humanize, arguments);\n    },\n\n\n    // Formats a number to a human-readable string.\n    // Localize by overriding the precision, thousand and decimal arguments.\n    formatNumber: function formatNumber(number) {\n      var precision = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var thousand = arguments.length <= 2 || arguments[2] === undefined ? ',' : arguments[2];\n      var decimal = arguments.length <= 3 || arguments[3] === undefined ? '.' : arguments[3];\n\n      // Create some private utility functions to make the computational\n      // code that follows much easier to read.\n      var firstComma = function firstComma(_number, _thousand, _position) {\n        return _position ? _number.substr(0, _position) + _thousand : '';\n      };\n\n      var commas = function commas(_number, _thousand, _position) {\n        return _number.substr(_position).replace(/(\\d{3})(?=\\d)/g, '$1' + _thousand);\n      };\n\n      var decimals = function decimals(_number, _decimal, usePrecision) {\n        return usePrecision ? _decimal + Humanize.toFixed(Math.abs(_number), usePrecision).split('.')[1] : '';\n      };\n\n      var usePrecision = Humanize.normalizePrecision(precision);\n\n      // Do some calc\n      var negative = number < 0 && '-' || '';\n      var base = String(parseInt(Humanize.toFixed(Math.abs(number || 0), usePrecision), 10));\n      var mod = base.length > 3 ? base.length % 3 : 0;\n\n      // Format the number\n      return negative + firstComma(base, thousand, mod) + commas(base, thousand, mod) + decimals(number, decimal, usePrecision);\n    },\n\n\n    // Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61')\n    toFixed: function toFixed(value, precision) {\n      precision = exists(precision) ? precision : Humanize.normalizePrecision(precision, 0);\n      var power = Math.pow(10, precision);\n\n      // Multiply up by precision, round accurately, then divide and use native toFixed()\n      return (Math.round(value * power) / power).toFixed(precision);\n    },\n\n\n    // Ensures precision value is a positive integer\n    normalizePrecision: function normalizePrecision(value, base) {\n      value = Math.round(Math.abs(value));\n      return isNaN(value) ? base : value;\n    },\n\n\n    // Converts an integer to its ordinal as a string.\n    ordinal: function ordinal(value) {\n      var number = parseInt(value, 10);\n\n      if (number === 0) {\n        return value;\n      }\n\n      var specialCase = number % 100;\n      if ([11, 12, 13].indexOf(specialCase) >= 0) {\n        return number + 'th';\n      }\n\n      var leastSignificant = number % 10;\n\n      var end = void 0;\n      switch (leastSignificant) {\n        case 1:\n          end = 'st';\n          break;\n        case 2:\n          end = 'nd';\n          break;\n        case 3:\n          end = 'rd';\n          break;\n        default:\n          end = 'th';\n      }\n\n      return '' + number + end;\n    },\n\n\n    // Interprets numbers as occurences. Also accepts an optional array/map of overrides.\n    times: function times(value) {\n      var overrides = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (isFiniteNumber(value) && value >= 0) {\n        var number = parseFloat(value);\n        var smallTimes = ['never', 'once', 'twice'];\n        if (exists(overrides[number])) {\n          return String(overrides[number]);\n        }\n\n        var numberString = exists(smallTimes[number]) && smallTimes[number].toString();\n        return numberString || number.toString() + ' times';\n      }\n      return null;\n    },\n\n\n    // Returns the plural version of a given word if the value is not 1. The default suffix is 's'.\n    pluralize: function pluralize(number, singular, plural) {\n      if (!(exists(number) && exists(singular))) {\n        return null;\n      }\n\n      plural = exists(plural) ? plural : singular + 's';\n\n      return parseInt(number, 10) === 1 ? singular : plural;\n    },\n\n\n    // Truncates a string if it is longer than the specified number of characters (inclusive).\n    // Truncated strings will end with a translatable ellipsis sequence (\"…\").\n    truncate: function truncate(str) {\n      var length = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '...' : arguments[2];\n\n      if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n      }\n      return str;\n    },\n\n\n    // Truncates a string after a certain number of words.\n    truncateWords: function truncateWords(string, length) {\n      var array = string.split(' ');\n      var result = '';\n      var i = 0;\n\n      while (i < length) {\n        if (exists(array[i])) {\n          result += array[i] + ' ';\n        }\n        i++;\n      }\n\n      if (array.length > length) {\n        return result + '...';\n      }\n\n      return null;\n    },\n    truncatewords: function truncatewords() {\n      return Humanize.truncateWords.apply(Humanize, arguments);\n    },\n\n\n    // Truncates a number to an upper bound.\n    boundedNumber: function boundedNumber(num) {\n      var bound = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];\n      var ending = arguments.length <= 2 || arguments[2] === undefined ? '+' : arguments[2];\n\n      var result = void 0;\n\n      if (isFiniteNumber(num) && isFiniteNumber(bound)) {\n        if (num > bound) {\n          result = bound + ending;\n        }\n      }\n\n      return (result || num).toString();\n    },\n    truncatenumber: function truncatenumber() {\n      return Humanize.boundedNumber.apply(Humanize, arguments);\n    },\n\n\n    // Converts a list of items to a human readable string with an optional limit.\n    oxford: function oxford(items, limit, limitStr) {\n      var numItems = items.length;\n\n      var limitIndex = void 0;\n      if (numItems < 2) {\n        return String(items);\n      } else if (numItems === 2) {\n        return items.join(' and ');\n      } else if (exists(limit) && numItems > limit) {\n        var extra = numItems - limit;\n        limitIndex = limit;\n        limitStr = exists(limitStr) ? limitStr : ', and ' + extra + ' ' + Humanize.pluralize(extra, 'other');\n      } else {\n        limitIndex = -1;\n        limitStr = ', and ' + items[numItems - 1];\n      }\n\n      return items.slice(0, limitIndex).join(', ') + limitStr;\n    },\n\n\n    // Converts an object to a definition-like string\n    dictionary: function dictionary(object) {\n      var joiner = arguments.length <= 1 || arguments[1] === undefined ? ' is ' : arguments[1];\n      var separator = arguments.length <= 2 || arguments[2] === undefined ? ', ' : arguments[2];\n\n      var result = '';\n\n      if (exists(object) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && !isArray(object)) {\n        var defs = [];\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            var val = object[key];\n            defs.push('' + key + joiner + val);\n          }\n        }\n\n        return defs.join(separator);\n      }\n\n      return result;\n    },\n\n\n    // Describes how many times an item appears in a list\n    frequency: function frequency(list, verb) {\n      if (!isArray(list)) {\n        return null;\n      }\n\n      var len = list.length;\n      var times = Humanize.times(len);\n\n      if (len === 0) {\n        return times + ' ' + verb;\n      }\n\n      return verb + ' ' + times;\n    },\n    pace: function pace(value, intervalMs) {\n      var unit = arguments.length <= 2 || arguments[2] === undefined ? 'time' : arguments[2];\n\n      if (value === 0 || intervalMs === 0) {\n        // Needs a better string than this...\n        return 'No ' + Humanize.pluralize(0, unit);\n      }\n\n      // Expose these as overridables?\n      var prefix = 'Approximately';\n      var timeUnit = void 0;\n      var relativePace = void 0;\n\n      var rate = value / intervalMs;\n      for (var i = 0; i < TIME_FORMATS.length; ++i) {\n        // assumes sorted list\n        var f = TIME_FORMATS[i];\n        relativePace = rate * f.value;\n        if (relativePace > 1) {\n          timeUnit = f.name;\n          break;\n        }\n      }\n\n      // Use the last time unit if there is nothing smaller\n      if (!timeUnit) {\n        prefix = 'Less than';\n        relativePace = 1;\n        timeUnit = TIME_FORMATS[TIME_FORMATS.length - 1].name;\n      }\n\n      var roundedPace = Math.round(relativePace);\n      unit = Humanize.pluralize(roundedPace, unit);\n\n      return prefix + ' ' + roundedPace + ' ' + unit + ' per ' + timeUnit;\n    },\n\n\n    // Converts newlines to <br/> tags\n    nl2br: function nl2br(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '<br/>' : arguments[1];\n\n      return string.replace(/\\n/g, replacement);\n    },\n\n\n    // Converts <br/> tags to newlines\n    br2nl: function br2nl(string) {\n      var replacement = arguments.length <= 1 || arguments[1] === undefined ? '\\r\\n' : arguments[1];\n\n      return string.replace(/\\<br\\s*\\/?\\>/g, replacement);\n    },\n\n\n    // Capitalizes first letter in a string\n    capitalize: function capitalize(string) {\n      var downCaseTail = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      return '' + string.charAt(0).toUpperCase() + (downCaseTail ? string.slice(1).toLowerCase() : string.slice(1));\n    },\n\n\n    // Capitalizes the first letter of each word in a string\n    capitalizeAll: function capitalizeAll(string) {\n      return string.replace(/(?:^|\\s)\\S/g, function (a) {\n        return a.toUpperCase();\n      });\n    },\n\n\n    // Titlecase words in a string.\n    titleCase: function titleCase(string) {\n      var smallWords = /\\b(a|an|and|at|but|by|de|en|for|if|in|of|on|or|the|to|via|vs?\\.?)\\b/i;\n      var internalCaps = /\\S+[A-Z]+\\S*/;\n      var splitOnWhiteSpaceRegex = /\\s+/;\n      var splitOnHyphensRegex = /-/;\n\n      var _doTitleCase = void 0;\n      _doTitleCase = function doTitleCase(_string) {\n        var hyphenated = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n        var firstOrLast = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\n        var titleCasedArray = [];\n        var stringArray = _string.split(hyphenated ? splitOnHyphensRegex : splitOnWhiteSpaceRegex);\n\n        for (var index = 0; index < stringArray.length; ++index) {\n          var word = stringArray[index];\n          if (word.indexOf('-') !== -1) {\n            titleCasedArray.push(_doTitleCase(word, true, index === 0 || index === stringArray.length - 1));\n            continue;\n          }\n\n          if (firstOrLast && (index === 0 || index === stringArray.length - 1)) {\n            titleCasedArray.push(internalCaps.test(word) ? word : Humanize.capitalize(word));\n            continue;\n          }\n\n          if (internalCaps.test(word)) {\n            titleCasedArray.push(word);\n          } else if (smallWords.test(word)) {\n            titleCasedArray.push(word.toLowerCase());\n          } else {\n            titleCasedArray.push(Humanize.capitalize(word));\n          }\n        }\n\n        return titleCasedArray.join(hyphenated ? '-' : ' ');\n      };\n\n      return _doTitleCase(string);\n    },\n    titlecase: function titlecase() {\n      return Humanize.titleCase.apply(Humanize, arguments);\n    }\n  };\n\n  return Humanize;\n});"],
  "mappings": "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",
  "names": ["exists", "isNaN", "isFiniteNumber", "isArray", "firstComma", "commas", "decimals", "usePrecision"]
}
