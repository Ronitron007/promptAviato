{
  "version": 3,
  "sources": ["../../node_modules/@base2/pretty-print-object/dist/index.js", "../../node_modules/react-element-to-jsx-string/node_modules/react-is/cjs/react-is.development.js", "../../node_modules/react-element-to-jsx-string/node_modules/react-is/index.js", "../../node_modules/is-plain-object/dist/is-plain-object.mjs", "../../node_modules/react-element-to-jsx-string/src/formatter/spacer.js", "../../node_modules/react-element-to-jsx-string/src/formatter/sortObject.js", "../../node_modules/react-element-to-jsx-string/src/tree.js", "../../node_modules/react-element-to-jsx-string/src/parser/parseReactElement.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatFunction.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatComplexDataStructure.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatPropValue.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatProp.js", "../../node_modules/react-element-to-jsx-string/src/formatter/mergeSiblingPlainStringChildrenReducer.js", "../../node_modules/react-element-to-jsx-string/src/formatter/sortPropsByNames.js", "../../node_modules/react-element-to-jsx-string/src/formatter/createPropFilter.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatReactElementNode.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatReactFragmentNode.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatTreeNode.js", "../../node_modules/react-element-to-jsx-string/src/formatter/formatTree.js", "../../node_modules/react-element-to-jsx-string/src/index.js"],
  "sourcesContent": ["\"use strict\";\n/** @format */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prettyPrint = void 0;\nvar seen = [];\n/**\n * Check if a value is an object or a function. Keep in mind that array, function, regexp, etc, are objects in JavaScript.\n *\n * @param value the value to check\n * @return true if the value is an object or a function\n */\nfunction isObj(value) {\n    var type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\n/**\n * Check if a value is a regular expression.\n *\n * @param value the value to check\n * @return true if the value is a regular expression\n */\nfunction isRegexp(value) {\n    return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n/**\n * Get an array of all of the enumerable symbols for an object.\n *\n * @param object the object to get the enumerable symbols for\n */\nfunction getOwnEnumPropSymbols(object) {\n    return Object.getOwnPropertySymbols(object).filter(function (keySymbol) {\n        return Object.prototype.propertyIsEnumerable.call(object, keySymbol);\n    });\n}\n/**\n * pretty print an object\n *\n * @param input the object to pretty print\n * @param options the formatting options, transforms, and filters\n * @param pad the padding string\n */\nfunction prettyPrint(input, options, pad) {\n    if (pad === void 0) { pad = ''; }\n    // sensible option defaults\n    var defaultOptions = {\n        indent: '\\t',\n        singleQuotes: true\n    };\n    var combinedOptions = __assign(__assign({}, defaultOptions), options);\n    var tokens;\n    if (combinedOptions.inlineCharacterLimit === undefined) {\n        tokens = {\n            newLine: '\\n',\n            newLineOrSpace: '\\n',\n            pad: pad,\n            indent: pad + combinedOptions.indent\n        };\n    }\n    else {\n        tokens = {\n            newLine: '@@__PRETTY_PRINT_NEW_LINE__@@',\n            newLineOrSpace: '@@__PRETTY_PRINT_NEW_LINE_OR_SPACE__@@',\n            pad: '@@__PRETTY_PRINT_PAD__@@',\n            indent: '@@__PRETTY_PRINT_INDENT__@@'\n        };\n    }\n    var expandWhiteSpace = function (string) {\n        if (combinedOptions.inlineCharacterLimit === undefined) {\n            return string;\n        }\n        var oneLined = string\n            .replace(new RegExp(tokens.newLine, 'g'), '')\n            .replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ')\n            .replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');\n        if (oneLined.length <= combinedOptions.inlineCharacterLimit) {\n            return oneLined;\n        }\n        return string\n            .replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\\n')\n            .replace(new RegExp(tokens.pad, 'g'), pad)\n            .replace(new RegExp(tokens.indent, 'g'), pad + combinedOptions.indent);\n    };\n    if (seen.indexOf(input) !== -1) {\n        return '\"[Circular]\"';\n    }\n    if (input === null ||\n        input === undefined ||\n        typeof input === 'number' ||\n        typeof input === 'boolean' ||\n        typeof input === 'function' ||\n        typeof input === 'symbol' ||\n        isRegexp(input)) {\n        return String(input);\n    }\n    if (input instanceof Date) {\n        return \"new Date('\".concat(input.toISOString(), \"')\");\n    }\n    if (Array.isArray(input)) {\n        if (input.length === 0) {\n            return '[]';\n        }\n        seen.push(input);\n        var ret = '[' +\n            tokens.newLine +\n            input\n                .map(function (el, i) {\n                var eol = input.length - 1 === i\n                    ? tokens.newLine\n                    : ',' + tokens.newLineOrSpace;\n                var value;\n                if (combinedOptions.transform) {\n                    value = combinedOptions.transform(input, i, function () {\n                        return prettyPrint(el, combinedOptions, pad + combinedOptions.indent);\n                    });\n                }\n                else {\n                    value = prettyPrint(el, combinedOptions, pad + combinedOptions.indent);\n                }\n                return tokens.indent + value + eol;\n            })\n                .join('') +\n            tokens.pad +\n            ']';\n        seen.pop();\n        return expandWhiteSpace(ret);\n    }\n    if (isObj(input)) {\n        var objKeys_1 = __spreadArray(__spreadArray([], Object.keys(input), true), getOwnEnumPropSymbols(input), true);\n        if (combinedOptions.filter) {\n            objKeys_1 = objKeys_1.filter(function (el) {\n                return combinedOptions.filter && combinedOptions.filter(input, el);\n            });\n        }\n        if (objKeys_1.length === 0) {\n            return '{}';\n        }\n        seen.push(input);\n        var ret = '{' +\n            tokens.newLine +\n            objKeys_1\n                .map(function (el, i) {\n                var eol = objKeys_1.length - 1 === i\n                    ? tokens.newLine\n                    : ',' + tokens.newLineOrSpace;\n                var isSymbol = typeof el === 'symbol';\n                var isClassic = !isSymbol &&\n                    /^[a-z$_][a-z$_0-9]*$/i.test(el.toString());\n                var key = isSymbol || isClassic\n                    ? el\n                    : prettyPrint(el, combinedOptions);\n                var value;\n                if (combinedOptions.transform) {\n                    value = combinedOptions.transform(input, el, function () {\n                        return prettyPrint(input[el], combinedOptions, pad + combinedOptions.indent);\n                    });\n                }\n                else {\n                    value = prettyPrint(input[el], combinedOptions, pad + combinedOptions.indent);\n                }\n                return tokens.indent + String(key) + ': ' + value + eol;\n            })\n                .join('') +\n            tokens.pad +\n            '}';\n        seen.pop();\n        return expandWhiteSpace(ret);\n    }\n    input = String(input).replace(/[\\r\\n]/g, function (x) {\n        return x === '\\n' ? '\\\\n' : '\\\\r';\n    });\n    if (!combinedOptions.singleQuotes) {\n        input = input.replace(/\"/g, '\\\\\"');\n        return \"\\\"\".concat(input, \"\\\"\");\n    }\n    input = input.replace(/\\\\?'/g, \"\\\\'\");\n    return \"'\".concat(input, \"'\");\n}\nexports.prettyPrint = prettyPrint;\n", "/**\n * @license React\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_SERVER_CONTEXT_TYPE:\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n}\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar SuspenseList = REACT_SUSPENSE_LIST_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false;\nvar hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n    }\n  }\n\n  return false;\n}\nfunction isConcurrentMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {\n      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n    }\n  }\n\n  return false;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\nfunction isSuspenseList(object) {\n  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;\n}\n\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.SuspenseList = SuspenseList;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isSuspenseList = isSuspenseList;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n", "/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n", "/* @flow */\n\nexport default (times: number, tabStop: number): string => {\n  if (times === 0) {\n    return '';\n  }\n\n  return new Array(times * tabStop).fill(' ').join('');\n};\n", "/* @flow */\nimport * as React from 'react';\n\nfunction safeSortObject(value: any, seen: WeakSet<any>): any {\n  // return non-object value as is\n  if (value === null || typeof value !== 'object') {\n    return value;\n  }\n\n  // return date, regexp and react element values as is\n  if (\n    value instanceof Date ||\n    value instanceof RegExp ||\n    React.isValidElement(value)\n  ) {\n    return value;\n  }\n\n  seen.add(value);\n\n  // make a copy of array with each item passed through the sorting algorithm\n  if (Array.isArray(value)) {\n    return value.map(v => safeSortObject(v, seen));\n  }\n\n  // make a copy of object with key sorted\n  return Object.keys(value)\n    .sort()\n    .reduce((result, key) => {\n      if (key === '_owner') {\n        return result;\n      }\n      if (key === 'current' || seen.has(value[key])) {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = '[Circular]';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = safeSortObject(value[key], seen);\n      }\n      return result;\n    }, {});\n}\n\nexport default function sortObject(value: any): any {\n  return safeSortObject(value, new WeakSet());\n}\n", "/* @flow */\n/* eslint-disable no-use-before-define */\n\nimport type { Key } from 'react';\n\ntype PropsType = { [key: string]: any };\ntype DefaultPropsType = { [key: string]: any };\n\nexport type StringTreeNode = {|\n  type: 'string',\n  value: string,\n|};\n\nexport type NumberTreeNode = {|\n  type: 'number',\n  value: number,\n|};\n\nexport type ReactElementTreeNode = {|\n  type: 'ReactElement',\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[],\n|};\n\nexport type ReactFragmentTreeNode = {|\n  type: 'ReactFragment',\n  key: ?Key,\n  childrens: TreeNode[],\n|};\n\nexport type TreeNode =\n  | StringTreeNode\n  | NumberTreeNode\n  | ReactElementTreeNode\n  | ReactFragmentTreeNode;\n\nexport const createStringTreeNode = (value: string): StringTreeNode => ({\n  type: 'string',\n  value,\n});\n\nexport const createNumberTreeNode = (value: number): NumberTreeNode => ({\n  type: 'number',\n  value,\n});\n\nexport const createReactElementTreeNode = (\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[]\n): ReactElementTreeNode => ({\n  type: 'ReactElement',\n  displayName,\n  props,\n  defaultProps,\n  childrens,\n});\n\nexport const createReactFragmentTreeNode = (\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactFragmentTreeNode => ({\n  type: 'ReactFragment',\n  key,\n  childrens,\n});\n", "/* @flow */\n\nimport React, { type Element as ReactElement, Fragment } from 'react';\nimport {\n  ForwardRef,\n  isContextConsumer,\n  isContextProvider,\n  isForwardRef,\n  isLazy,\n  isMemo,\n  isProfiler,\n  isStrictMode,\n  isSuspense,\n  Memo,\n} from 'react-is';\nimport type { Options } from './../options';\nimport {\n  createStringTreeNode,\n  createNumberTreeNode,\n  createReactElementTreeNode,\n  createReactFragmentTreeNode,\n} from './../tree';\nimport type { TreeNode } from './../tree';\n\nconst supportFragment = Boolean(Fragment);\n\nconst getFunctionTypeName = (functionType): string => {\n  if (!functionType.name || functionType.name === '_default') {\n    return 'No Display Name';\n  }\n  return functionType.name;\n};\n\nconst getWrappedComponentDisplayName = (Component: *): string => {\n  switch (true) {\n    case Boolean(Component.displayName):\n      return Component.displayName;\n    case Component.$$typeof === Memo:\n      return getWrappedComponentDisplayName(Component.type);\n    case Component.$$typeof === ForwardRef:\n      return getWrappedComponentDisplayName(Component.render);\n    default:\n      return getFunctionTypeName(Component);\n  }\n};\n\n// heavily inspired by:\n// https://github.com/facebook/react/blob/3746eaf985dd92f8aa5f5658941d07b6b855e9d9/packages/react-devtools-shared/src/backend/renderer.js#L399-L496\nconst getReactElementDisplayName = (element: ReactElement<*>): string => {\n  switch (true) {\n    case typeof element.type === 'string':\n      return element.type;\n    case typeof element.type === 'function':\n      if (element.type.displayName) {\n        return element.type.displayName;\n      }\n      return getFunctionTypeName(element.type);\n    case isForwardRef(element):\n    case isMemo(element):\n      return getWrappedComponentDisplayName(element.type);\n    case isContextConsumer(element):\n      return `${element.type._context.displayName || 'Context'}.Consumer`;\n    case isContextProvider(element):\n      return `${element.type._context.displayName || 'Context'}.Provider`;\n    case isLazy(element):\n      return 'Lazy';\n    case isProfiler(element):\n      return 'Profiler';\n    case isStrictMode(element):\n      return 'StrictMode';\n    case isSuspense(element):\n      return 'Suspense';\n    default:\n      return 'UnknownElementType';\n  }\n};\n\nconst noChildren = (propsValue, propName) => propName !== 'children';\n\nconst onlyMeaningfulChildren = (children): boolean =>\n  children !== true &&\n  children !== false &&\n  children !== null &&\n  children !== '';\n\nconst filterProps = (originalProps: {}, cb: (any, string) => boolean) => {\n  const filteredProps = {};\n\n  Object.keys(originalProps)\n    .filter(key => cb(originalProps[key], key))\n    .forEach(key => (filteredProps[key] = originalProps[key]));\n\n  return filteredProps;\n};\n\nconst parseReactElement = (\n  element: ReactElement<*> | string | number,\n  options: Options\n): TreeNode => {\n  const { displayName: displayNameFn = getReactElementDisplayName } = options;\n\n  if (typeof element === 'string') {\n    return createStringTreeNode(element);\n  } else if (typeof element === 'number') {\n    return createNumberTreeNode(element);\n  } else if (!React.isValidElement(element)) {\n    throw new Error(\n      `react-element-to-jsx-string: Expected a React.Element, got \\`${typeof element}\\``\n    );\n  }\n\n  const displayName = displayNameFn(element);\n\n  const props = filterProps(element.props, noChildren);\n  if (element.ref !== null) {\n    props.ref = element.ref;\n  }\n\n  const key = element.key;\n  if (typeof key === 'string' && key.search(/^\\./)) {\n    // React automatically add key=\".X\" when there are some children\n    props.key = key;\n  }\n\n  const defaultProps = filterProps(element.type.defaultProps || {}, noChildren);\n  const childrens = React.Children.toArray(element.props.children)\n    .filter(onlyMeaningfulChildren)\n    .map(child => parseReactElement(child, options));\n\n  if (supportFragment && element.type === Fragment) {\n    return createReactFragmentTreeNode(key, childrens);\n  }\n\n  return createReactElementTreeNode(\n    displayName,\n    props,\n    defaultProps,\n    childrens\n  );\n};\n\nexport default parseReactElement;\n", "import type { Options } from './../options';\n\nfunction noRefCheck() {}\n\nexport const inlineFunction = (fn: any): string =>\n  fn\n    .toString()\n    .split('\\n')\n    .map(line => line.trim())\n    .join('');\n\nexport const preserveFunctionLineBreak = (fn: any): string => fn.toString();\n\nconst defaultFunctionValue = inlineFunction;\n\nexport default (fn: Function, options: Options): string => {\n  const { functionValue = defaultFunctionValue, showFunctions } = options;\n  if (!showFunctions && functionValue === defaultFunctionValue) {\n    return functionValue(noRefCheck);\n  }\n\n  return functionValue(fn);\n};\n", "/* @flow */\n\nimport { isValidElement } from 'react';\nimport { prettyPrint } from '@base2/pretty-print-object';\nimport sortObject from './sortObject';\nimport parseReactElement from './../parser/parseReactElement';\nimport formatTreeNode from './formatTreeNode';\nimport formatFunction from './formatFunction';\nimport spacer from './spacer';\nimport type { Options } from './../options';\n\nexport default (\n  value: Object | Array<any>,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const normalizedValue = sortObject(value);\n\n  const stringifiedValue = prettyPrint(normalizedValue, {\n    transform: (currentObj, prop, originalResult) => {\n      const currentValue = currentObj[prop];\n\n      if (currentValue && isValidElement(currentValue)) {\n        return formatTreeNode(\n          parseReactElement(currentValue, options),\n          true,\n          lvl,\n          options\n        );\n      }\n\n      if (typeof currentValue === 'function') {\n        return formatFunction(currentValue, options);\n      }\n\n      return originalResult();\n    },\n  });\n\n  if (inline) {\n    return stringifiedValue\n      .replace(/\\s+/g, ' ')\n      .replace(/{ /g, '{')\n      .replace(/ }/g, '}')\n      .replace(/\\[ /g, '[')\n      .replace(/ ]/g, ']');\n  }\n\n  // Replace tabs with spaces, and add necessary indentation in front of each new line\n  return stringifiedValue\n    .replace(/\\t/g, spacer(1, options.tabStop))\n    .replace(/\\n([^$])/g, `\\n${spacer(lvl + 1, options.tabStop)}$1`);\n};\n", "/* @flow */\n\nimport { isPlainObject } from 'is-plain-object';\nimport { isValidElement } from 'react';\nimport formatComplexDataStructure from './formatComplexDataStructure';\nimport formatFunction from './formatFunction';\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport parseReactElement from './../parser/parseReactElement';\n\nconst escape = (s: string): string => s.replace(/\"/g, '&quot;');\n\nconst formatPropValue = (\n  propValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (typeof propValue === 'number') {\n    return `{${String(propValue)}}`;\n  }\n\n  if (typeof propValue === 'string') {\n    return `\"${escape(propValue)}\"`;\n  }\n\n  // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n  if (typeof propValue === 'symbol') {\n    const symbolDescription = propValue\n      .valueOf()\n      .toString()\n      .replace(/Symbol\\((.*)\\)/, '$1');\n\n    if (!symbolDescription) {\n      return `{Symbol()}`;\n    }\n\n    return `{Symbol('${symbolDescription}')}`;\n  }\n\n  if (typeof propValue === 'function') {\n    return `{${formatFunction(propValue, options)}}`;\n  }\n\n  if (isValidElement(propValue)) {\n    return `{${formatTreeNode(\n      parseReactElement(propValue, options),\n      true,\n      lvl,\n      options\n    )}}`;\n  }\n\n  if (propValue instanceof Date) {\n    if (isNaN(propValue.valueOf())) {\n      return `{new Date(NaN)}`;\n    }\n    return `{new Date(\"${propValue.toISOString()}\")}`;\n  }\n\n  if (isPlainObject(propValue) || Array.isArray(propValue)) {\n    return `{${formatComplexDataStructure(propValue, inline, lvl, options)}}`;\n  }\n\n  return `{${String(propValue)}}`;\n};\n\nexport default formatPropValue;\n", "/* @flow */\n\nimport spacer from './spacer';\nimport formatPropValue from './formatPropValue';\nimport type { Options } from './../options';\n\nexport default (\n  name: string,\n  hasValue: boolean,\n  value: any,\n  hasDefaultValue: boolean,\n  defaultValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): {\n  attributeFormattedInline: string,\n  attributeFormattedMultiline: string,\n  isMultilineAttribute: boolean,\n} => {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error(\n      `The prop \"${name}\" has no value and no default: could not be formatted`\n    );\n  }\n\n  const usedValue = hasValue ? value : defaultValue;\n\n  const { useBooleanShorthandSyntax, tabStop } = options;\n\n  const formattedPropValue = formatPropValue(usedValue, inline, lvl, options);\n\n  let attributeFormattedInline = ' ';\n  let attributeFormattedMultiline = `\\n${spacer(lvl + 1, tabStop)}`;\n  const isMultilineAttribute = formattedPropValue.includes('\\n');\n\n  if (\n    useBooleanShorthandSyntax &&\n    formattedPropValue === '{false}' &&\n    !hasDefaultValue\n  ) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = '';\n    attributeFormattedMultiline = '';\n  } else if (useBooleanShorthandSyntax && formattedPropValue === '{true}') {\n    attributeFormattedInline += `${name}`;\n    attributeFormattedMultiline += `${name}`;\n  } else {\n    attributeFormattedInline += `${name}=${formattedPropValue}`;\n    attributeFormattedMultiline += `${name}=${formattedPropValue}`;\n  }\n\n  return {\n    attributeFormattedInline,\n    attributeFormattedMultiline,\n    isMultilineAttribute,\n  };\n};\n", "/* @flow */\n\nimport { createStringTreeNode } from './../tree';\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const nodes = previousNodes.slice(\n    0,\n    previousNodes.length > 0 ? previousNodes.length - 1 : 0\n  );\n  const previousNode = previousNodes[previousNodes.length - 1];\n\n  if (\n    previousNode &&\n    (currentNode.type === 'string' || currentNode.type === 'number') &&\n    (previousNode.type === 'string' || previousNode.type === 'number')\n  ) {\n    nodes.push(\n      createStringTreeNode(\n        String(previousNode.value) + String(currentNode.value)\n      )\n    );\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};\n", "/* @flow */\n\nconst isKeyOrRefProps = (propName: string) => ['key', 'ref'].includes(propName);\n\nexport default (shouldSortUserProps: boolean) => (\n  props: string[]\n): string[] => {\n  const haveKeyProp = props.includes('key');\n  const haveRefProp = props.includes('ref');\n\n  const userPropsOnly = props.filter(oneProp => !isKeyOrRefProps(oneProp));\n\n  const sortedProps = shouldSortUserProps\n    ? [...userPropsOnly.sort()] // We use basic lexical order\n    : [...userPropsOnly];\n\n  if (haveRefProp) {\n    sortedProps.unshift('ref');\n  }\n\n  if (haveKeyProp) {\n    sortedProps.unshift('key');\n  }\n\n  return sortedProps;\n};\n", "/* @flow */\n\nexport default function createPropFilter(\n  props: {},\n  filter: string[] | ((any, string) => boolean)\n) {\n  if (Array.isArray(filter)) {\n    return (key: string) => filter.indexOf(key) === -1;\n  } else {\n    return (key: string) => filter(props[key], key);\n  }\n}\n", "/* @flow */\n\nimport spacer from './spacer';\nimport formatTreeNode from './formatTreeNode';\nimport formatProp from './formatProp';\nimport mergeSiblingPlainStringChildrenReducer from './mergeSiblingPlainStringChildrenReducer';\nimport sortPropsByNames from './sortPropsByNames';\nimport createPropFilter from './createPropFilter';\nimport type { Options } from './../options';\nimport type { ReactElementTreeNode } from './../tree';\n\nconst compensateMultilineStringElementIndentation = (\n  element,\n  formattedElement: string,\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => {\n  const { tabStop } = options;\n\n  if (element.type === 'string') {\n    return formattedElement\n      .split('\\n')\n      .map((line, offset) => {\n        if (offset === 0) {\n          return line;\n        }\n\n        return `${spacer(lvl, tabStop)}${line}`;\n      })\n      .join('\\n');\n  }\n\n  return formattedElement;\n};\n\nconst formatOneChildren = (\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => element =>\n  compensateMultilineStringElementIndentation(\n    element,\n    formatTreeNode(element, inline, lvl, options),\n    inline,\n    lvl,\n    options\n  );\n\nconst onlyPropsWithOriginalValue = (defaultProps, props) => propName => {\n  const haveDefaultValue = Object.keys(defaultProps).includes(propName);\n  return (\n    !haveDefaultValue ||\n    (haveDefaultValue && defaultProps[propName] !== props[propName])\n  );\n};\n\nconst isInlineAttributeTooLong = (\n  attributes: string[],\n  inlineAttributeString: string,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean => {\n  if (!maxInlineAttributesLineLength) {\n    return attributes.length > 1;\n  }\n\n  return (\n    spacer(lvl, tabStop).length + inlineAttributeString.length >\n    maxInlineAttributesLineLength\n  );\n};\n\nconst shouldRenderMultilineAttr = (\n  attributes: string[],\n  inlineAttributeString: string,\n  containsMultilineAttr: boolean,\n  inline: boolean,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean =>\n  (isInlineAttributeTooLong(\n    attributes,\n    inlineAttributeString,\n    lvl,\n    tabStop,\n    maxInlineAttributesLineLength\n  ) ||\n    containsMultilineAttr) &&\n  !inline;\n\nexport default (\n  node: ReactElementTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const {\n    type,\n    displayName = '',\n    childrens,\n    props = {},\n    defaultProps = {},\n  } = node;\n\n  if (type !== 'ReactElement') {\n    throw new Error(\n      `The \"formatReactElementNode\" function could only format node of type \"ReactElement\". Given:  ${type}`\n    );\n  }\n\n  const {\n    filterProps,\n    maxInlineAttributesLineLength,\n    showDefaultProps,\n    sortProps,\n    tabStop,\n  } = options;\n\n  let out = `<${displayName}`;\n\n  let outInlineAttr = out;\n  let outMultilineAttr = out;\n  let containsMultilineAttr = false;\n\n  const visibleAttributeNames = [];\n\n  const propFilter = createPropFilter(props, filterProps);\n\n  Object.keys(props)\n    .filter(propFilter)\n    .filter(onlyPropsWithOriginalValue(defaultProps, props))\n    .forEach(propName => visibleAttributeNames.push(propName));\n\n  Object.keys(defaultProps)\n    .filter(propFilter)\n    .filter(() => showDefaultProps)\n    .filter(defaultPropName => !visibleAttributeNames.includes(defaultPropName))\n    .forEach(defaultPropName => visibleAttributeNames.push(defaultPropName));\n\n  const attributes = sortPropsByNames(sortProps)(visibleAttributeNames);\n\n  attributes.forEach(attributeName => {\n    const {\n      attributeFormattedInline,\n      attributeFormattedMultiline,\n      isMultilineAttribute,\n    } = formatProp(\n      attributeName,\n      Object.keys(props).includes(attributeName),\n      props[attributeName],\n      Object.keys(defaultProps).includes(attributeName),\n      defaultProps[attributeName],\n      inline,\n      lvl,\n      options\n    );\n\n    if (isMultilineAttribute) {\n      containsMultilineAttr = true;\n    }\n\n    outInlineAttr += attributeFormattedInline;\n    outMultilineAttr += attributeFormattedMultiline;\n  });\n\n  outMultilineAttr += `\\n${spacer(lvl, tabStop)}`;\n\n  if (\n    shouldRenderMultilineAttr(\n      attributes,\n      outInlineAttr,\n      containsMultilineAttr,\n      inline,\n      lvl,\n      tabStop,\n      maxInlineAttributesLineLength\n    )\n  ) {\n    out = outMultilineAttr;\n  } else {\n    out = outInlineAttr;\n  }\n\n  if (childrens && childrens.length > 0) {\n    const newLvl = lvl + 1;\n\n    out += '>';\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl, tabStop);\n    }\n\n    out += childrens\n      .reduce(mergeSiblingPlainStringChildrenReducer, [])\n      .map(formatOneChildren(inline, newLvl, options))\n      .join(!inline ? `\\n${spacer(newLvl, tabStop)}` : '');\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl - 1, tabStop);\n    }\n    out += `</${displayName}>`;\n  } else {\n    if (\n      !isInlineAttributeTooLong(\n        attributes,\n        outInlineAttr,\n        lvl,\n        tabStop,\n        maxInlineAttributesLineLength\n      )\n    ) {\n      out += ' ';\n    }\n\n    out += '/>';\n  }\n\n  return out;\n};\n", "/* @flow */\n\nimport type { Key } from 'react';\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type {\n  ReactElementTreeNode,\n  ReactFragmentTreeNode,\n  TreeNode,\n} from './../tree';\n\nconst REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = '';\nconst REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = 'React.Fragment';\n\nconst toReactElementTreeNode = (\n  displayName: string,\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactElementTreeNode => {\n  let props = {};\n  if (key) {\n    props = { key };\n  }\n\n  return {\n    type: 'ReactElement',\n    displayName,\n    props,\n    defaultProps: {},\n    childrens,\n  };\n};\n\nconst isKeyedFragment = ({ key }: ReactFragmentTreeNode) => Boolean(key);\nconst hasNoChildren = ({ childrens }: ReactFragmentTreeNode) =>\n  childrens.length === 0;\n\nexport default (\n  node: ReactFragmentTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const { type, key, childrens } = node;\n\n  if (type !== 'ReactFragment') {\n    throw new Error(\n      `The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ${type}`\n    );\n  }\n\n  const { useFragmentShortSyntax } = options;\n\n  let displayName;\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return formatReactElementNode(\n    toReactElementTreeNode(displayName, key, childrens),\n    inline,\n    lvl,\n    options\n  );\n};\n", "/* @flow */\n\nimport formatReactElementNode from './formatReactElementNode';\nimport formatReactFragmentNode from './formatReactFragmentNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nconst jsxStopChars = ['<', '>', '{', '}'];\nconst shouldBeEscaped = (s: string) =>\n  jsxStopChars.some(jsxStopChar => s.includes(jsxStopChar));\n\nconst escape = (s: string) => {\n  if (!shouldBeEscaped(s)) {\n    return s;\n  }\n\n  return `{\\`${s}\\`}`;\n};\n\nconst preserveTrailingSpace = (s: string) => {\n  let result = s;\n  if (result.endsWith(' ')) {\n    result = result.replace(/^(.*?)(\\s+)$/, \"$1{'$2'}\");\n  }\n\n  if (result.startsWith(' ')) {\n    result = result.replace(/^(\\s+)(.*)$/, \"{'$1'}$2\");\n  }\n\n  return result;\n};\n\nexport default (\n  node: TreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (node.type === 'number') {\n    return String(node.value);\n  }\n\n  if (node.type === 'string') {\n    return node.value\n      ? `${preserveTrailingSpace(escape(String(node.value)))}`\n      : '';\n  }\n\n  if (node.type === 'ReactElement') {\n    return formatReactElementNode(node, inline, lvl, options);\n  }\n\n  if (node.type === 'ReactFragment') {\n    return formatReactFragmentNode(node, inline, lvl, options);\n  }\n\n  throw new TypeError(`Unknow format type \"${node.type}\"`);\n};\n", "/* @flow */\n\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nexport default (node: TreeNode, options: Options): string =>\n  formatTreeNode(node, false, 0, options);\n", "/* @flow */\n\nimport formatTree from './formatter/formatTree';\nimport parseReactElement from './parser/parseReactElement';\nimport type { Element as ReactElement } from 'react';\nimport type { Options } from './options';\n\nconst reactElementToJsxString = (\n  element: ReactElement<any>,\n  {\n    filterProps = [],\n    showDefaultProps = true,\n    showFunctions = false,\n    functionValue,\n    tabStop = 2,\n    useBooleanShorthandSyntax = true,\n    useFragmentShortSyntax = true,\n    sortProps = true,\n    maxInlineAttributesLineLength,\n    displayName,\n  }: Options = {}\n) => {\n  if (!element) {\n    throw new Error('react-element-to-jsx-string: Expected a ReactElement');\n  }\n\n  const options = {\n    filterProps,\n    showDefaultProps,\n    showFunctions,\n    functionValue,\n    tabStop,\n    useBooleanShorthandSyntax,\n    useFragmentShortSyntax,\n    sortProps,\n    maxInlineAttributesLineLength,\n    displayName,\n  };\n\n  return formatTree(parseReactElement(element, options), options);\n};\n\nexport default reactElementToJsxString;\n\nexport {\n  inlineFunction,\n  preserveFunctionLineBreak,\n} from './formatter/formatFunction';\n"],
  "mappings": "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",
  "names": ["prettyPrint", "ForwardRef", "Fragment", "Memo", "isContextConsumer", "isContextProvider", "isForwardRef", "isLazy", "isMemo", "isProfiler", "isStrictMode", "isSuspense", "times", "tabStop", "Array", "fill", "join", "safeSortObject", "value", "seen", "_typeof", "Date", "RegExp", "isValidElement", "add", "isArray", "map", "v", "Object", "keys", "sort", "reduce", "result", "key", "has", "sortObject", "WeakSet", "createStringTreeNode", "type", "createNumberTreeNode", "createReactElementTreeNode", "displayName", "props", "defaultProps", "childrens", "createReactFragmentTreeNode", "supportFragment", "Boolean", "Fragment", "getFunctionTypeName", "functionType", "name", "getWrappedComponentDisplayName", "Component", "$$typeof", "Memo", "ForwardRef", "render", "getReactElementDisplayName", "element", "isForwardRef", "isMemo", "isContextConsumer", "concat", "_context", "isContextProvider", "isLazy", "isProfiler", "isStrictMode", "isSuspense", "noChildren", "propsValue", "propName", "onlyMeaningfulChildren", "children", "filterProps", "originalProps", "cb", "filteredProps", "filter", "forEach", "parseReactElement", "options", "_options$displayName", "displayNameFn", "React", "Error", "ref", "search", "Children", "toArray", "child", "noRefCheck", "inlineFunction", "fn", "toString", "split", "line", "trim", "preserveFunctionLineBreak", "defaultFunctionValue", "_options$functionValu", "functionValue", "showFunctions", "inline", "lvl", "normalizedValue", "stringifiedValue", "prettyPrint", "transform", "currentObj", "prop", "originalResult", "currentValue", "formatTreeNode", "formatFunction", "replace", "spacer", "escape", "s", "formatPropValue", "propValue", "String", "symbolDescription", "valueOf", "isNaN", "toISOString", "isPlainObject", "formatComplexDataStructure", "hasValue", "hasDefaultValue", "defaultValue", "usedValue", "useBooleanShorthandSyntax", "formattedPropValue", "attributeFormattedInline", "attributeFormattedMultiline", "isMultilineAttribute", "includes", "previousNodes", "currentNode", "nodes", "slice", "length", "previousNode", "push", "isKeyOrRefProps", "shouldSortUserProps", "haveKeyProp", "haveRefProp", "userPropsOnly", "oneProp", "sortedProps", "_toConsumableArray", "unshift", "createPropFilter", "indexOf", "compensateMultilineStringElementIndentation", "formattedElement", "offset", "formatOneChildren", "onlyPropsWithOriginalValue", "haveDefaultValue", "isInlineAttributeTooLong", "attributes", "inlineAttributeString", "maxInlineAttributesLineLength", "shouldRenderMultilineAttr", "containsMultilineAttr", "node", "_node$displayName", "_node$props", "_node$defaultProps", "showDefaultProps", "sortProps", "out", "outInlineAttr", "outMultilineAttr", "visibleAttributeNames", "propFilter", "defaultPropName", "sortPropsByNames", "attributeName", "_formatProp", "formatProp", "newLvl", "mergeSiblingPlainStringChildrenReducer", "REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX", "REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX", "toReactElementTreeNode", "isKeyedFragment", "_ref", "hasNoChildren", "_ref2", "useFragmentShortSyntax", "formatReactElementNode", "jsxStopChars", "shouldBeEscaped", "some", "jsxStopChar", "preserveTrailingSpace", "endsWith", "startsWith", "formatReactFragmentNode", "TypeError", "reactElementToJsxString", "arguments", "undefined", "_ref$filterProps", "_ref$showDefaultProps", "_ref$showFunctions", "_ref$tabStop", "_ref$useBooleanShorth", "_ref$useFragmentShort", "_ref$sortProps", "formatTree"]
}
